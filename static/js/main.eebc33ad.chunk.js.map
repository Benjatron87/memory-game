{"version":3,"sources":["components/Navbar/index.js","components/Jumbotron/index.js","components/Card/index.js","components/Footer/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","message","score","topscore","Jumbotron","Card","onClick","shuffleCards","id","style","backgroundImage","concat","image","Footer","Wrapper","children","App","state","characters","_this","array","i","length","j","Math","floor","random","_ref","shuffle","bool","map","character","setState","_this2","this","components_Navbar","components_Jumbotron","components_Wrapper","components_Card","checkBool","name","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6jEAiBeA,MAdf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,sBAGAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWJ,EAAMK,SAC9BJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,UACUJ,EAAMM,MADhB,iBACqCN,EAAMO,kBCElCC,MAVf,WACE,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,wFCMSM,MAPf,SAAcT,GAEV,OACIC,EAAAC,EAAAC,cAAA,OAAKO,QAAS,kBAAMV,EAAMW,aAAaX,EAAMY,KAAKR,UAAU,OAAOQ,GAAIZ,EAAMY,GAAIC,MAAO,CAAEC,gBAAe,OAAAC,OAAUf,EAAMgB,MAAhB,eCKlGC,MAVf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4FACbH,EAAAC,EAAAC,cAAA,gDCCSe,MAJf,SAAiBlB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCAAyCJ,EAAMmB,kBCKnEb,EAAQ,EACRC,EAAW,MA2FAa,6MA/EbC,MAAQ,CACNC,aACAhB,QACAC,WACAF,QAAS,MAGXM,aAAe,SAACC,GACd,IAAMU,EAAaC,EAAKF,MAAMC,YAlBlC,SAAiBE,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,IAmBzCC,CAAQV,GAMR,IAJA,IAAIhB,EAAQiB,EAAKF,MAAMf,MACnBC,EAAWgB,EAAKF,MAAMd,SACtBF,EAAU,GAENoB,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IACjCb,IAAOU,EAAWG,GAAGb,KACI,MAAvBU,EAAWG,GAAGQ,MACfX,EAAWG,GAAGQ,KAAO,IAErB3B,GAAgB,IAGhBgB,EAAWY,IAAI,SAAAC,GAAS,OACtBA,EAAUF,KAAO,MAEnB3B,GAAgB,EAChBD,EAAU,+CAKbC,EAAQC,IACTA,EAAWD,GAGA,KAAVA,GACDD,EAAU,4CAEViB,EAAWY,IAAI,SAAAC,GAAS,OACtBA,EAAUF,KAAO,OAGZ3B,EAAQ,KACfD,EAAU,GACVC,EAAQ,GAGViB,EAAKa,SAAS,CAACd,aAAYhB,QAAOC,WAAUF,qFAGrC,IAAAgC,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACoC,EAAD,CACIjC,MAAOgC,KAAKjB,MAAMf,MAClBC,SAAU+B,KAAKjB,MAAMd,SACrBF,QAASiC,KAAKjB,MAAMhB,UAExBJ,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,KACGH,KAAKjB,MAAMC,WAAWY,IAAI,SAAAC,GAAS,OAClClC,EAAAC,EAAAC,cAACuC,EAAD,CACEC,UAAWN,EAAKM,UAChBhC,aAAc0B,EAAK1B,aACnBC,GAAIuB,EAAUvB,GACdI,MAAOmB,EAAUnB,MACjB4B,KAAMT,EAAUS,KAChBX,KAAME,EAAUF,UAItBhC,EAAAC,EAAAC,cAAC0C,EAAD,cA3EUC,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eebc33ad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar fixed-top navbar-light bg-light\">\n      <a className=\"title\">\n        Benj's Memory Game\n      </a>\n      <a className=\"message\">{props.message}</a>\n      <a className=\"score\">\n        Score: {props.score} | Top Score: {props.topscore}\n      </a>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n      <h1>\n          Click the Character Icons to Guess. Click All of Them Once to Win.\n      </h1>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction Card(props) {\n\n    return (\n        <div onClick={() => props.shuffleCards(props.id)} className=\"card\" id={props.id} style={{ backgroundImage : `url(${props.image})` , }}></div>\n    );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <nav className=\"fixed-bottom navbar d-flex justify-content-center navbar-expand-lg navbar-light bg-light\">\n      <a>\n        Copywrite Benj Thomsen 2019\n      </a>\n    </nav>\n  );\n}\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper d-flex justify-content-center\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\"\nimport Wrapper from \"./components/Wrapper\"\nimport characters from \"./characters.json\"\n\nlet score = 0\nlet topscore = 0;\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n\n  state = {\n    characters,\n    score,\n    topscore,\n    message: \"\"\n  }\n\n  shuffleCards = (id) => {\n    const characters = this.state.characters;\n\n    shuffle(characters);\n\n    let score = this.state.score;\n    let topscore = this.state.topscore;\n    let message = \"\";\n\n    for(let i = 0; i < characters.length; i++){\n      if(id === characters[i].id){\n        if(characters[i].bool === \"0\"){\n          characters[i].bool = \"1\";\n\n          score = score + 1;\n        }\n        else{\n          characters.map(character => (\n            character.bool = \"0\"\n          ))\n          score = score * 0;\n          message = \"You Lose! Click a Character to Start Again\"\n        }\n      }\n    }\n\n    if(score > topscore){\n      topscore = score;\n    }\n    \n    if(score === 12){\n      message = \"You Win! Click a Character to Start Again\"\n\n      characters.map(character => (\n        character.bool = \"0\"\n      ))\n    }\n    else if (score > 12){\n      message = \"\";\n      score = 0;\n    }\n\n    this.setState({characters, score, topscore, message})\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Navbar \n            score={this.state.score}\n            topscore={this.state.topscore}\n            message={this.state.message}\n        />\n        <Jumbotron />\n        <Wrapper>\n          {this.state.characters.map(character => (\n            <Card\n              checkBool={this.checkBool}\n              shuffleCards={this.shuffleCards}\n              id={character.id}\n              image={character.image}\n              name={character.name}\n              bool={character.bool}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}